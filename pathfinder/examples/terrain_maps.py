"""
@file terrain_maps.py
@brief Примеры карт с различными типами местности для тестирования.

@details
Этот модуль содержит примеры карт с различными типами местности,
которые можно использовать для тестирования алгоритмов поиска пути.
"""

import sys
import os

# Добавляем путь к исходному коду
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

# Легенда:
# '.' - дорога (стоимость: 1)
# ',' - трава (стоимость: 2)
# '*' - грязь (стоимость: 3)
# '=' - камни (стоимость: 4)
# '~' - вода (стоимость: 5)
# '^' - болото (стоимость: 7)
# '#' - стена (непроходимо)
# 'S' - начальная точка
# 'E' - конечная точка

# Функция для преобразования строковых карт в списки символов
def convert_map_to_list(map_strings):
    return [list(row) for row in map_strings]

# Функция для нормализации карты (все строки одинаковой длины)
def normalize_map(map_strings):
    max_width = max(len(row) for row in map_strings)
    return [row.ljust(max_width, '#') for row in map_strings]

# Небольшая карта с разными типами местности (строковое представление)
SMALL_TERRAIN_MAP_STRINGS = [
    "#############",
    "#S..,,*=~^..#",
    "#.#####.####",
    "#.*,,.~..*,*#",
    "#.####.#####",
    "#.*~~^,,.=.E#",
    "#############"
]

# Карта среднего размера с разными типами местности и препятствиями (строковое представление)
MEDIUM_TERRAIN_MAP_STRINGS = [
    "############################",
    "#S....,,,,*****====~~~~~~~#",
    "#.########################.#",
    "#......,,,,*****====~~~~~.#",
    "#########################.##",
    "#^^^^^....,,,,*****====~~~#",
    "#..........................#",
    "#########################.##",
    "#.,,,,*****====~~~~~~~^^^^^#",
    "#.........................E#",
    "############################"
]

# Нормализуем карты и преобразуем в списки символов
SMALL_TERRAIN_MAP_STRINGS = normalize_map(SMALL_TERRAIN_MAP_STRINGS)
MEDIUM_TERRAIN_MAP_STRINGS = normalize_map(MEDIUM_TERRAIN_MAP_STRINGS)

SMALL_TERRAIN_MAP = convert_map_to_list(SMALL_TERRAIN_MAP_STRINGS)
MEDIUM_TERRAIN_MAP = convert_map_to_list(MEDIUM_TERRAIN_MAP_STRINGS)

# Большая карта с разнообразным ландшафтом и сложными препятствиями (строковое представление)
LARGE_TERRAIN_MAP_STRINGS = [
    "###############################################",
    "#S..............................................#",
    "#.#############################################.#",
    "#.#.............,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.#",
    "#.#.##########################################.#",
    "#.#...............................................#",
    "#.########################################.......#",
    "#.#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#.#######",
    "#.#*******************************======#.#..E..#",
    "#.#^^^^^^^^^^^^^^^^^^^^^^#####~~~~~~~~~~#.#.....#",
    "#.#.........................#############.#.....#",
    "#.#.................................................#",
    "###############################################"
]

# Нормализуем карту и преобразуем в список символов
LARGE_TERRAIN_MAP_STRINGS = normalize_map(LARGE_TERRAIN_MAP_STRINGS)
LARGE_TERRAIN_MAP = convert_map_to_list(LARGE_TERRAIN_MAP_STRINGS)

# Карта с городом, дорогами и природными зонами (строковое представление)
CITY_TERRAIN_MAP_STRINGS = [
    "###############################################",
    "#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#",
    "#,.#########################################.,,#",
    "#,.#.............,,,,,,,,,,,,,,,,,,,,,,,,#.,,,#",
    "#,.#.#####################################.,,,,,#",
    "#,.#.............................................#",
    "#,.########################################.....#",
    "#,.#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#.#####",
    "#,.#*******************************======#.#...E#",
    "#,.#^^^^^^^^^^^^^^^^^^^^^^#####~~~~~~~~~~#.#....#",
    "#S.#.........................#############.#....#",
    "#,...................................................#",
    "###############################################"
]

# Нормализуем карту и преобразуем в список символов
CITY_TERRAIN_MAP_STRINGS = normalize_map(CITY_TERRAIN_MAP_STRINGS)
CITY_TERRAIN_MAP = convert_map_to_list(CITY_TERRAIN_MAP_STRINGS)

# Карта с героями для поиска оптимальной точки сбора (строковое представление)
HEROES_MAP_STRINGS = [
    "################################################",
    "#H1.............................................#",
    "#.#############################################.#",
    "#.#..............................................#",
    "#.#.##########################################.##",
    "#.#..............................................#",
    "#.##########################################....#",
    "#.#.....................................#.#######",
    "#.#..........................................#H2.#",
    "#.#................................#####......#.#",
    "#.#................................#...#......#.#",
    "#.#................................#...#......#.#",
    "#.#................................#...#......#.#",
    "#.#................................#...#......#.#",
    "####H3######################.................#H4#"
]

# Нормализуем карту и преобразуем в список символов
HEROES_MAP_STRINGS = normalize_map(HEROES_MAP_STRINGS)
HEROES_MAP = convert_map_to_list(HEROES_MAP_STRINGS)

# Позиции героев на карте для поиска оптимальной точки сбора
HERO_POSITIONS = [
    (1, 2),    # Позиция героя H1
    (21, 22),  # Позиция героя H2
    (2, 32),   # Позиция героя H3
    (12, 40)   # Позиция героя H4
]

# Скорости героев (различные скорости передвижения)
HERO_SPEEDS = [1.0, 0.8, 1.2, 0.9]

# Функция для преобразования карты в формат с позициями для всех героев
def map_with_heroes():
    """
    @brief Преобразует карту HEROES_MAP, удаляя метки героев (H1, H2, и т.д.)
    
    @return Карта без обозначений героев
    """
    cleaned_map = []
    for row in HEROES_MAP:
        cleaned_row = []
        i = 0
        while i < len(row):
            # Проверяем, является ли текущая позиция частью метки героя
            if i < len(row) - 1 and row[i] == 'H' and row[i+1].isdigit():
                # Заменяем 'H' и следующую цифру на '..'
                cleaned_row.append('.')
                cleaned_row.append('.')
                i += 2  # Пропускаем следующий символ (цифру)
            else:
                cleaned_row.append(row[i])
                i += 1
        cleaned_map.append(cleaned_row)
    return cleaned_map 