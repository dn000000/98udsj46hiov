name: PathFinder CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - testing
          - production
      run_tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean
      generate_docs:
        description: 'Generate documentation'
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 doxygen
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      if: ${{ github.event.inputs.run_tests != 'false' }}
      run: |
        pytest --cov=pathfinder tests/
    
    - name: Generate documentation
      if: ${{ github.event.inputs.generate_docs != 'false' }}
      run: |
        cd pathfinder
        doxygen doxyfile
    
    - name: Upload documentation
      if: ${{ github.event.inputs.generate_docs != 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: pathfinder/docs/doxygen/html/
    
    - name: Configure environment
      run: |
        echo "Configuring for environment: $ENVIRONMENT"
        python pathfinder/config/configure.py --env $ENVIRONMENT
    
    - name: Build package
      run: |
        python -m pip install --upgrade build
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pathfinder-package
        path: dist/
    
  deploy:
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'development' }}
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: pathfinder-package
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Deploy to environment
      run: |
        echo "Deploying to $ENVIRONMENT environment"
        if [ "$ENVIRONMENT" = "production" ]; then
          # Для production используем PyPI
          python -m twine upload --repository pypi dist/*
        elif [ "$ENVIRONMENT" = "testing" ]; then
          # Для testing используем TestPyPI
          python -m twine upload --repository testpypi dist/*
        fi
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    
    - name: Send notification
      run: |
        python pathfinder/notifications/send_notification.py --event "deployment" --env "$ENVIRONMENT" --status "success"
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }} 